# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `office.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module OfficeData
_M_OfficeData = Ice.openModule('OfficeData')
__name__ = 'OfficeData'

if 'BuildingOptions' not in _M_OfficeData.__dict__:
    _M_OfficeData.BuildingOptions = Ice.createTempClass()
    class BuildingOptions(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    BuildingOptions.NewBuilding = BuildingOptions("NewBuilding", 0)
    BuildingOptions.BuildingExpansion = BuildingOptions("BuildingExpansion", 1)
    BuildingOptions.BuildingDemolition = BuildingOptions("BuildingDemolition", 2)
    BuildingOptions._enumerators = { 0:BuildingOptions.NewBuilding, 1:BuildingOptions.BuildingExpansion, 2:BuildingOptions.BuildingDemolition }

    _M_OfficeData._t_BuildingOptions = IcePy.defineEnum('::OfficeData::BuildingOptions', BuildingOptions, (), BuildingOptions._enumerators)

    _M_OfficeData.BuildingOptions = BuildingOptions
    del BuildingOptions

if 'Gender' not in _M_OfficeData.__dict__:
    _M_OfficeData.Gender = Ice.createTempClass()
    class Gender(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Gender.woman = Gender("woman", 0)
    Gender.man = Gender("man", 1)
    Gender._enumerators = { 0:Gender.woman, 1:Gender.man }

    _M_OfficeData._t_Gender = IcePy.defineEnum('::OfficeData::Gender', Gender, (), Gender._enumerators)

    _M_OfficeData.Gender = Gender
    del Gender

if 'IDReason' not in _M_OfficeData.__dict__:
    _M_OfficeData.IDReason = Ice.createTempClass()
    class IDReason(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    IDReason.firstID = IDReason("firstID", 0)
    IDReason.dataChange = IDReason("dataChange", 1)
    IDReason.imageChange = IDReason("imageChange", 2)
    IDReason.idDamage = IDReason("idDamage", 3)
    IDReason.idLost = IDReason("idLost", 4)
    IDReason._enumerators = { 0:IDReason.firstID, 1:IDReason.dataChange, 2:IDReason.imageChange, 3:IDReason.idDamage, 4:IDReason.idLost }

    _M_OfficeData._t_IDReason = IcePy.defineEnum('::OfficeData::IDReason', IDReason, (), IDReason._enumerators)

    _M_OfficeData.IDReason = IDReason
    del IDReason

if 'Person' not in _M_OfficeData.__dict__:
    _M_OfficeData.Person = Ice.createTempClass()
    class Person(object):
        def __init__(self, name='', surname='', pesel=''):
            self.name = name
            self.surname = surname
            self.pesel = pesel

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.surname)
            _h = 5 * _h + Ice.getHash(self.pesel)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_OfficeData.Person):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.surname is None or other.surname is None:
                    if self.surname != other.surname:
                        return (-1 if self.surname is None else 1)
                else:
                    if self.surname < other.surname:
                        return -1
                    elif self.surname > other.surname:
                        return 1
                if self.pesel is None or other.pesel is None:
                    if self.pesel != other.pesel:
                        return (-1 if self.pesel is None else 1)
                else:
                    if self.pesel < other.pesel:
                        return -1
                    elif self.pesel > other.pesel:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_OfficeData._t_Person)

        __repr__ = __str__

    _M_OfficeData._t_Person = IcePy.defineStruct('::OfficeData::Person', Person, (), (
        ('name', (), IcePy._t_string),
        ('surname', (), IcePy._t_string),
        ('pesel', (), IcePy._t_string)
    ))

    _M_OfficeData.Person = Person
    del Person

if 'Request' not in _M_OfficeData.__dict__:
    _M_OfficeData.Request = Ice.createTempClass()
    class Request(Ice.Value):
        def __init__(self, person=Ice._struct_marker):
            if person is Ice._struct_marker:
                self.person = _M_OfficeData.Person()
            else:
                self.person = person

        def ice_id(self):
            return '::OfficeData::Request'

        @staticmethod
        def ice_staticId():
            return '::OfficeData::Request'

        def __str__(self):
            return IcePy.stringify(self, _M_OfficeData._t_Request)

        __repr__ = __str__

    _M_OfficeData._t_Request = IcePy.defineValue('::OfficeData::Request', Request, -1, (), False, False, None, (('person', (), _M_OfficeData._t_Person, False, 0),))
    Request._ice_type = _M_OfficeData._t_Request

    _M_OfficeData.Request = Request
    del Request

if 'BuildingPermission' not in _M_OfficeData.__dict__:
    _M_OfficeData.BuildingPermission = Ice.createTempClass()
    class BuildingPermission(_M_OfficeData.Request):
        def __init__(self, person=Ice._struct_marker, city='', street='', number=0, option=_M_OfficeData.BuildingOptions.NewBuilding):
            _M_OfficeData.Request.__init__(self, person)
            self.city = city
            self.street = street
            self.number = number
            self.option = option

        def ice_id(self):
            return '::OfficeData::BuildingPermission'

        @staticmethod
        def ice_staticId():
            return '::OfficeData::BuildingPermission'

        def __str__(self):
            return IcePy.stringify(self, _M_OfficeData._t_BuildingPermission)

        __repr__ = __str__

    _M_OfficeData._t_BuildingPermission = IcePy.defineValue('::OfficeData::BuildingPermission', BuildingPermission, -1, (), False, False, _M_OfficeData._t_Request, (
        ('city', (), IcePy._t_string, False, 0),
        ('street', (), IcePy._t_string, False, 0),
        ('number', (), IcePy._t_short, False, 0),
        ('option', (), _M_OfficeData._t_BuildingOptions, False, 0)
    ))
    BuildingPermission._ice_type = _M_OfficeData._t_BuildingPermission

    _M_OfficeData.BuildingPermission = BuildingPermission
    del BuildingPermission

if 'VehicleRegistration' not in _M_OfficeData.__dict__:
    _M_OfficeData.VehicleRegistration = Ice.createTempClass()
    class VehicleRegistration(_M_OfficeData.Request):
        def __init__(self, person=Ice._struct_marker, carBrand='', chassisNumber='', productionYear=0, seatsNumber=0):
            _M_OfficeData.Request.__init__(self, person)
            self.carBrand = carBrand
            self.chassisNumber = chassisNumber
            self.productionYear = productionYear
            self.seatsNumber = seatsNumber

        def ice_id(self):
            return '::OfficeData::VehicleRegistration'

        @staticmethod
        def ice_staticId():
            return '::OfficeData::VehicleRegistration'

        def __str__(self):
            return IcePy.stringify(self, _M_OfficeData._t_VehicleRegistration)

        __repr__ = __str__

    _M_OfficeData._t_VehicleRegistration = IcePy.defineValue('::OfficeData::VehicleRegistration', VehicleRegistration, -1, (), False, False, _M_OfficeData._t_Request, (
        ('carBrand', (), IcePy._t_string, False, 0),
        ('chassisNumber', (), IcePy._t_string, False, 0),
        ('productionYear', (), IcePy._t_short, False, 0),
        ('seatsNumber', (), IcePy._t_short, False, 0)
    ))
    VehicleRegistration._ice_type = _M_OfficeData._t_VehicleRegistration

    _M_OfficeData.VehicleRegistration = VehicleRegistration
    del VehicleRegistration

if 'IDCardIssuing' not in _M_OfficeData.__dict__:
    _M_OfficeData.IDCardIssuing = Ice.createTempClass()
    class IDCardIssuing(_M_OfficeData.Request):
        def __init__(self, person=Ice._struct_marker, phoneNumber='', familyName='', gender=_M_OfficeData.Gender.woman, reason=_M_OfficeData.IDReason.firstID):
            _M_OfficeData.Request.__init__(self, person)
            self.phoneNumber = phoneNumber
            self.familyName = familyName
            self.gender = gender
            self.reason = reason

        def ice_id(self):
            return '::OfficeData::IDCardIssuing'

        @staticmethod
        def ice_staticId():
            return '::OfficeData::IDCardIssuing'

        def __str__(self):
            return IcePy.stringify(self, _M_OfficeData._t_IDCardIssuing)

        __repr__ = __str__

    _M_OfficeData._t_IDCardIssuing = IcePy.defineValue('::OfficeData::IDCardIssuing', IDCardIssuing, -1, (), False, False, _M_OfficeData._t_Request, (
        ('phoneNumber', (), IcePy._t_string, False, 0),
        ('familyName', (), IcePy._t_string, False, 0),
        ('gender', (), _M_OfficeData._t_Gender, False, 0),
        ('reason', (), _M_OfficeData._t_IDReason, False, 0)
    ))
    IDCardIssuing._ice_type = _M_OfficeData._t_IDCardIssuing

    _M_OfficeData.IDCardIssuing = IDCardIssuing
    del IDCardIssuing

if 'Result' not in _M_OfficeData.__dict__:
    _M_OfficeData.Result = Ice.createTempClass()
    class Result(object):
        def __init__(self, id=0, requestType='', message=''):
            self.id = id
            self.requestType = requestType
            self.message = message

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.requestType)
            _h = 5 * _h + Ice.getHash(self.message)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_OfficeData.Result):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.requestType is None or other.requestType is None:
                    if self.requestType != other.requestType:
                        return (-1 if self.requestType is None else 1)
                else:
                    if self.requestType < other.requestType:
                        return -1
                    elif self.requestType > other.requestType:
                        return 1
                if self.message is None or other.message is None:
                    if self.message != other.message:
                        return (-1 if self.message is None else 1)
                else:
                    if self.message < other.message:
                        return -1
                    elif self.message > other.message:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_OfficeData._t_Result)

        __repr__ = __str__

    _M_OfficeData._t_Result = IcePy.defineStruct('::OfficeData::Result', Result, (), (
        ('id', (), IcePy._t_int),
        ('requestType', (), IcePy._t_string),
        ('message', (), IcePy._t_string)
    ))

    _M_OfficeData.Result = Result
    del Result

_M_OfficeData._t_Citizen = IcePy.defineValue('::OfficeData::Citizen', Ice.Value, -1, (), False, True, None, ())

if 'CitizenPrx' not in _M_OfficeData.__dict__:
    _M_OfficeData.CitizenPrx = Ice.createTempClass()
    class CitizenPrx(Ice.ObjectPrx):

        def handleResponse(self, result, context=None):
            return _M_OfficeData.Citizen._op_handleResponse.invoke(self, ((result, ), context))

        def handleResponseAsync(self, result, context=None):
            return _M_OfficeData.Citizen._op_handleResponse.invokeAsync(self, ((result, ), context))

        def begin_handleResponse(self, result, _response=None, _ex=None, _sent=None, context=None):
            return _M_OfficeData.Citizen._op_handleResponse.begin(self, ((result, ), _response, _ex, _sent, context))

        def end_handleResponse(self, _r):
            return _M_OfficeData.Citizen._op_handleResponse.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_OfficeData.CitizenPrx.ice_checkedCast(proxy, '::OfficeData::Citizen', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_OfficeData.CitizenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::OfficeData::Citizen'
    _M_OfficeData._t_CitizenPrx = IcePy.defineProxy('::OfficeData::Citizen', CitizenPrx)

    _M_OfficeData.CitizenPrx = CitizenPrx
    del CitizenPrx

    _M_OfficeData.Citizen = Ice.createTempClass()
    class Citizen(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::OfficeData::Citizen')

        def ice_id(self, current=None):
            return '::OfficeData::Citizen'

        @staticmethod
        def ice_staticId():
            return '::OfficeData::Citizen'

        def handleResponse(self, result, current=None):
            raise NotImplementedError("servant method 'handleResponse' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_OfficeData._t_CitizenDisp)

        __repr__ = __str__

    _M_OfficeData._t_CitizenDisp = IcePy.defineClass('::OfficeData::Citizen', Citizen, (), None, ())
    Citizen._ice_type = _M_OfficeData._t_CitizenDisp

    Citizen._op_handleResponse = IcePy.Operation('handleResponse', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_OfficeData._t_Result, False, 0),), (), None, ())

    _M_OfficeData.Citizen = Citizen
    del Citizen

_M_OfficeData._t_Office = IcePy.defineValue('::OfficeData::Office', Ice.Value, -1, (), False, True, None, ())

if 'OfficePrx' not in _M_OfficeData.__dict__:
    _M_OfficeData.OfficePrx = Ice.createTempClass()
    class OfficePrx(Ice.ObjectPrx):

        def requestBuildingIssue(self, issue, context=None):
            return _M_OfficeData.Office._op_requestBuildingIssue.invoke(self, ((issue, ), context))

        def requestBuildingIssueAsync(self, issue, context=None):
            return _M_OfficeData.Office._op_requestBuildingIssue.invokeAsync(self, ((issue, ), context))

        def begin_requestBuildingIssue(self, issue, _response=None, _ex=None, _sent=None, context=None):
            return _M_OfficeData.Office._op_requestBuildingIssue.begin(self, ((issue, ), _response, _ex, _sent, context))

        def end_requestBuildingIssue(self, _r):
            return _M_OfficeData.Office._op_requestBuildingIssue.end(self, _r)

        def requestVehicleIssue(self, issue, context=None):
            return _M_OfficeData.Office._op_requestVehicleIssue.invoke(self, ((issue, ), context))

        def requestVehicleIssueAsync(self, issue, context=None):
            return _M_OfficeData.Office._op_requestVehicleIssue.invokeAsync(self, ((issue, ), context))

        def begin_requestVehicleIssue(self, issue, _response=None, _ex=None, _sent=None, context=None):
            return _M_OfficeData.Office._op_requestVehicleIssue.begin(self, ((issue, ), _response, _ex, _sent, context))

        def end_requestVehicleIssue(self, _r):
            return _M_OfficeData.Office._op_requestVehicleIssue.end(self, _r)

        def requestIDCardIssue(self, issue, context=None):
            return _M_OfficeData.Office._op_requestIDCardIssue.invoke(self, ((issue, ), context))

        def requestIDCardIssueAsync(self, issue, context=None):
            return _M_OfficeData.Office._op_requestIDCardIssue.invokeAsync(self, ((issue, ), context))

        def begin_requestIDCardIssue(self, issue, _response=None, _ex=None, _sent=None, context=None):
            return _M_OfficeData.Office._op_requestIDCardIssue.begin(self, ((issue, ), _response, _ex, _sent, context))

        def end_requestIDCardIssue(self, _r):
            return _M_OfficeData.Office._op_requestIDCardIssue.end(self, _r)

        def connect(self, pesel, proxy, context=None):
            return _M_OfficeData.Office._op_connect.invoke(self, ((pesel, proxy), context))

        def connectAsync(self, pesel, proxy, context=None):
            return _M_OfficeData.Office._op_connect.invokeAsync(self, ((pesel, proxy), context))

        def begin_connect(self, pesel, proxy, _response=None, _ex=None, _sent=None, context=None):
            return _M_OfficeData.Office._op_connect.begin(self, ((pesel, proxy), _response, _ex, _sent, context))

        def end_connect(self, _r):
            return _M_OfficeData.Office._op_connect.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_OfficeData.OfficePrx.ice_checkedCast(proxy, '::OfficeData::Office', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_OfficeData.OfficePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::OfficeData::Office'
    _M_OfficeData._t_OfficePrx = IcePy.defineProxy('::OfficeData::Office', OfficePrx)

    _M_OfficeData.OfficePrx = OfficePrx
    del OfficePrx

    _M_OfficeData.Office = Ice.createTempClass()
    class Office(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::OfficeData::Office')

        def ice_id(self, current=None):
            return '::OfficeData::Office'

        @staticmethod
        def ice_staticId():
            return '::OfficeData::Office'

        def requestBuildingIssue(self, issue, current=None):
            raise NotImplementedError("servant method 'requestBuildingIssue' not implemented")

        def requestVehicleIssue(self, issue, current=None):
            raise NotImplementedError("servant method 'requestVehicleIssue' not implemented")

        def requestIDCardIssue(self, issue, current=None):
            raise NotImplementedError("servant method 'requestIDCardIssue' not implemented")

        def connect(self, pesel, proxy, current=None):
            raise NotImplementedError("servant method 'connect' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_OfficeData._t_OfficeDisp)

        __repr__ = __str__

    _M_OfficeData._t_OfficeDisp = IcePy.defineClass('::OfficeData::Office', Office, (), None, ())
    Office._ice_type = _M_OfficeData._t_OfficeDisp

    Office._op_requestBuildingIssue = IcePy.Operation('requestBuildingIssue', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_OfficeData._t_BuildingPermission, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Office._op_requestVehicleIssue = IcePy.Operation('requestVehicleIssue', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_OfficeData._t_VehicleRegistration, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Office._op_requestIDCardIssue = IcePy.Operation('requestIDCardIssue', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_OfficeData._t_IDCardIssuing, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Office._op_connect = IcePy.Operation('connect', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_OfficeData._t_CitizenPrx, False, 0)), (), None, ())

    _M_OfficeData.Office = Office
    del Office

# End of module OfficeData
